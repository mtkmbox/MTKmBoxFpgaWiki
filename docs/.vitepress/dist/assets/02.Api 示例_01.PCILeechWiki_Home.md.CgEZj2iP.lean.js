import{_ as i,c as r,a2 as o,o as t}from"./chunks/framework.8ehLuTaE.js";const u=JSON.parse('{"title":"The PCILeech Wiki and Guide","description":"","frontmatter":{},"headers":[],"relativePath":"02.Api 示例/01.PCILeechWiki/Home.md","filePath":"02.Api 示例/01.PCILeechWiki/Home.md"}'),a={name:"02.Api 示例/01.PCILeechWiki/Home.md"};function n(s,e,h,c,m,d){return t(),r("div",null,e[0]||(e[0]=[o('<h1 id="the-pcileech-wiki-and-guide" tabindex="-1">The PCILeech Wiki and Guide <a class="header-anchor" href="#the-pcileech-wiki-and-guide" aria-label="Permalink to &quot;The PCILeech Wiki and Guide&quot;">​</a></h1><p>===========================</p><p>PCILeech works on both Windows and Linux with a wide range of memory acquisition methods. The Windows version is somewhat more feature-rich and better performant than the Linux version due to some Windows-only dependencies and more optimized drivers. For general information about running PCILeech on Windows or Linux please check out the sections <a href="https://github.com/ufrisk/pcileech/wiki/PCILeech-on-Windows" target="_blank" rel="noreferrer">PCILeech on Windows</a> and <a href="https://github.com/ufrisk/pcileech/wiki/PCILeech-on-Linux" target="_blank" rel="noreferrer">PCILeech on Linux</a>.</p><hr><h2 id="memory-acquisition-methods" tabindex="-1">Memory acquisition methods: <a class="header-anchor" href="#memory-acquisition-methods" aria-label="Permalink to &quot;Memory acquisition methods:&quot;">​</a></h2><p>PCILeech is able to capture memory using a wide range of memory acquisition methods - both hardware based and software based methods. It&#39;s also possible to access remote memory made accessible via a remote LeechAgent.</p><p>Methods include (but are not limited to):</p><ul><li>Live memory via PCIe DMA with FPGA and USB3380 hardware.</li><li>Dump Files - Raw, Full Microsoft CrashDump, VirtualBox CoreDump, VMWare and Hyper-V save files.</li><li>Live Memory - Comae DumpIt and WinPmem.</li><li>Remote Memory - via LeechAgent and any supported acquisition method.</li></ul><p><strong>All memory acquisition is made through the <a href="https://github.com/ufrisk/LeechCore" target="_blank" rel="noreferrer">LeechCore</a> library.</strong> Please check out the <a href="https://github.com/ufrisk/LeechCore" target="_blank" rel="noreferrer">LeechCore and LeechService</a> project for detailed information about each memory acquisition method.</p><hr><h2 id="target-operating-systems" tabindex="-1">Target operating systems: <a class="header-anchor" href="#target-operating-systems" aria-label="Permalink to &quot;Target operating systems:&quot;">​</a></h2><p>As a general rule, PCILeech may always be able to dump memory of the target system supports it regardless whether the operating system is supported for kernel and user-mode module injection. For more information about kernel and user-mode injection please check out the Targets section in the menu to the right.</p><hr><h2 id="build-from-source" tabindex="-1">Build from source: <a class="header-anchor" href="#build-from-source" aria-label="Permalink to &quot;Build from source:&quot;">​</a></h2><p>Please find build instructions in the sections <a href="https://github.com/ufrisk/pcileech/wiki/PCILeech-on-Windows" target="_blank" rel="noreferrer">PCILeech on Windows</a> and <a href="https://github.com/ufrisk/pcileech/wiki/PCILeech-on-Linux" target="_blank" rel="noreferrer">PCILeech on Linux</a>.</p>',15)]))}const p=i(a,[["render",n]]);export{u as __pageData,p as default};
