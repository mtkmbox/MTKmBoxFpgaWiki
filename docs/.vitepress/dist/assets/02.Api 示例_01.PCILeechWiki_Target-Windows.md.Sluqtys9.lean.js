import{_ as t,c as o,a2 as i,o as a}from"./chunks/framework.BDQf3LYc.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"02.Api 示例/01.PCILeechWiki/Target-Windows.md","filePath":"02.Api 示例/01.PCILeechWiki/Target-Windows.md"}'),s={name:"02.Api 示例/01.PCILeechWiki/Target-Windows.md"};function n(l,e,r,d,c,m){return a(),o("div",null,e[0]||(e[0]=[i('<h2 id="target-operating-system-windows-64-bit" tabindex="-1">Target operating system: Windows (64-bit) <a class="header-anchor" href="#target-operating-system-windows-64-bit" aria-label="Permalink to &quot;Target operating system: Windows (64-bit)&quot;">​</a></h2><p>PCILeech is able to target 64-bit Windows versions with varying degrees of success. PCILeech is not able to target 32-bit Windows versions or secure operating system parts (secure kernel) on systems already booted running Virtualization based secure.</p><p>If possible to target the Windows system a wide range of kernel modules may be used. Also it may be possible to target the system with user-mode injections.</p><p>Even though PCILeech may not be able to target the specific operating system memory dumping may still be possible.</p><hr><h3 id="examples" tabindex="-1">Examples: <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples:&quot;">​</a></h3><p>Load a kernel module into Windows 7 by using the default memory scan technique.</p><ul><li><code>pcileech kmdload -kmd win7x64</code></li></ul><p>Load a kernel module into Windows 10. Compatible with VBS/VTL0 only if &quot;Protection of Code Integrity&quot; is not enabled. This technique may be unstable on the most recent Windows 10 versions.</p><ul><li><code>pcileech kmdload -kmd WIN10_X64</code></li></ul><p>Load a kernel module into Windows 10. Compatible with VBS/VTL0 only if &quot;Protection of Code Integrity&quot; is not enabled. This requires the windows-only <a href="https://github.com/ufrisk/MemProcFS/releases/latest" target="_blank" rel="noreferrer"><code>vmm.dll</code></a> from <a href="https://github.com/ufrisk/MemProcFS" target="_blank" rel="noreferrer">MemProcFS</a> to exist alongside PCILeech.</p><ul><li><code>pcileech.exe kmdload -kmd WIN10_X64_3</code></li></ul><p>Load a kernel module into Windows 10 by targeting the page table of the ntfs.sys driver signed on 2016-03-29.</p><ul><li><code>pcileech kmdload -kmd win10x64_ntfs_20160329 -pt</code></li></ul><p>Spawn a system shell on the target system (system needs to be locked and kernel module must be loaded). In this example the kernel module is loaded at address: 0x7fffe000.</p><ul><li><code>pcileech wx64_pscmd -kmd 0x7fffe000</code></li></ul><p>In addition to the examples below please find additional built-in commands and Windows compatible implants starting with wx64 when executing <code>pcileech</code> without any parameters.</p>',17)]))}const u=t(s,[["render",n]]);export{h as __pageData,u as default};
